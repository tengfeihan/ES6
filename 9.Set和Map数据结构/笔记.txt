Set和Map数据结构

1、Set
    ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值

    Set本身是一个构造函数，用来生成Set数据结构

    var s = new Set();
    [2, 3, 4, 5, 2, 2].map(x => s.add(x));  // Set不会接收重复的数
    for(let i of s){
        console.log(i);
    }

    // 去除数组的重复成员
    [...new Set(arr)]

    Set判断NaN是相等的，而对象是不相等的({} != {})

    Set结构的实例有以下属性
        Set.prototype.constructor：构造函数，默认就是Set函数
        Set.prototype.size：返回Set实例的成员总数

    Set实例的方法分为两大类：操作方法和遍历方法
    操作方法：
        add(value)：添加某个值，返回Set结构本身
        delete(value)：删除某个值，返回一个布尔值，表示删除是否成功
        has(value)：返回一个布尔值，表示该值是否为Set成员
        clear()：清楚所有成员，没有返回值

    遍历方法：
        keys()：返回键名的遍历器
        values()：返回键值得遍历器
        entries()：返回键值对的遍历器
        forEach()：使用回调函数遍历每个成员
    Set遍历的顺序就是插入顺序

    遍历的应用：
        扩展运算符(...)内部使用for...of循环，所以也可以用于Set结构


    Array.from方法可以将Set结构转为数组

    数组去重：
    1、
    function dedupe(arr) {
        return Array.from(new Set(arr));
    }
    2、
    console.log([...new Set(arr)]);

    数组的map和filter方法也可以用于Set
    let s2 = new Set([1, 2, 3]);
    s2 = new Set([...s2].map(x => x * 2));

    let s3 = new Set([1, 2, 3, 4, 5]);
    console.log(new Set([...s3].filter(x => x % 2 === 0)));

    // 数组的交集、并集、差集
    // 交集
    let a1 = new Set([1, 2, 3, 4, 5]);
    let a2 = new Set([2, 3, 4, 7, 8]);
    console.log([...new Set([...a1, ...a2])]);
    // 并集
    console.log([...new Set([...a1].filter(x => a2.has(x)))]);
    // 差集
    console.log([...new Set([...a1].filter(x => !a2.has(x)))]);

2、WeakSet
    WeakSet结构与Set类似，也是不重复的值的集合。但是，它与Set有两个区别
    a、WeakSet的成员只能是对象，而不能是其他类型的值
    b、WeakSet中的对象都是弱引用，即垃圾回收机制不考虑WeakSet对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在WeakSet中

3、Map
    JS的对象，本质上是键值对的集合(Hash结构)，但是传统上只能用字符串当做键。这给它的使用带来了很大的限制

    为了解决这个问题，ES6提供了Map数据结构。它类似于对象，也就是键值对的集合，但是键的范围不限于字符串，各种类型的值(包括对象)都可以当做键。也就是说，Object结构提供了"字符串 - 值"，Map结构提供了"值 - 值"的对应，是一种更完善的Hash结构

    let m = new Map();
    let o = {p: 'Hello World'};

4、WeakMap






























