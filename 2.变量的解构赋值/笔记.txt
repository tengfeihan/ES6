变量的解构赋值：

1、数组的解构赋值
    ES6允许按照一定的模式，从数组和对象中提取值，对变量进行赋值，这被称为解构(Destructuring)
    let [a, b, c] = [1, 2, 3];

    如果解构不成功，变量的值就等于undefined
    另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。
    如果等号右边不是数组(或者严格地说，不是可遍历的结构)，那么将会报错

    默认值：
        解构赋值允许指定默认值
        let [foo = true] = [];
        // foo true

2、对象的解构赋值
    解构不仅可以用于数组，还可以用于对象
    let {foo, bar} = {foo: 'aaa', bar: 'bbb'};
    // foo => 'aaa'
    // bar => 'bbb'

    对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由他的位置决定，而对象的属性没有次序，变量必须与属性同名，才能取到正确的值

    实际上，对象的解构赋值是下面形式的简写
    let {foo: foo, bar: bar} = {foo: 'aaa', bar: 'bbb'};
    也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者
    var { foo: baz } = { foo: "aaa", bar: "bbb" };
    // baz => 'aaa'
    // foo => error: foo is not defined
    上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo

    注意：采用这种写法时，变量的声明和赋值是一体的。对于let和const来说，变量不能重新声明，所以一旦赋值的变量以前声明过，就会报错

    对象的解构也可以指定默认值，默认值生效的条件是，对象的属性值严格等于undefined

    如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错

3、字符串的解构赋值
    字符串也可以解构赋值，这是因为此时，字符串被转换成了一个类似数组的对象
    const [a, b, c, d, e] = 'hello';
    // a => 'h'
    // b => 'e'
    // c => 'l'
    ...

    类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值
    let {length: len} = 'hello';
    // len => 5

4、数值和布尔值的解构赋值
    解构赋值时，如果等号左边是数组和布尔值，则会先转为对象

    解构赋值的规则是，只要等号右边的值不是对象，将先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错

5、函数参数的解构赋值
    function add([x, y]) {
        console.log(x + y);
    }

    add([1, 2]); => 3

    * 函数参数的解构也可以使用默认值

6、圆括号问题
    ES6的规则是，只要有可能导致解构的歧义，就不得使用圆括号
    建议：只要有可能，就不要在模式中放置圆括号

7、用途
    a、交换变量的值
        [x, y] = [y, x];
    b、从函数返回多个值
        function example() {
            return [1, 2, 3];
        }
        var [a, b, c] = example();
    c、函数参数的定义
        // 参数是一组有次序的值
        function f([x, y, z]) { ... }
        f([1, 2, 3]);
        // 参数是一组无次序的值
        function f({x, y, z}) { ... }
        f({z: 3, y: 2, x: 1});
    d、提取JSON数据
        var jsonData = {
            id: 42,
            status: "OK",
            data: [867, 5309]
        };

        let { id, status, data: number } = jsonData;
    e、函数参数的默认值
    f、遍历map


















