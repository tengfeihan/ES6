let和const：

1、let：
    ES6新增了let命令，用来声明变量。用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效
    a、存在块级作用域
    b、不存在变量提升
    c、暂时性死区     
        如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。
        还是因为不存在变量提升导致
    d、暂时性死区会导致typeof不再是一个百分之百安全的操作
        typeof a;   // a没有被声明，undefined

        typeof a;   // ReferenceError 报错
        let a = 12;
    e、let不允许在相同作用域内，重复声明同一个变量
        function () {   // 报错
          let a = 10;
          let a = 1;
        }

2、块级作用域
    为什么需要块级作用域
    ES5只有全局作用域和函数作用域，没有块级作用域
    a、内层变量可能会覆盖外层变量
    b、for玄幻变量泄露为全局变量

    let实际上为JavaScript新增了块级作用域
    ES6允许块级作用域的任意嵌套
        {{{{let a = 12}}}}  // 外层作用域无法读取内层作用域的变量
    内层作用于可以定义外层作用域的同名变量
    块级作用域的出现，实际上是的立即执行匿名函数(IIFE)不再必要

    块级作用域和函数声明
        允许在块级作用域内声明函数
        函数声明类似于var，即会提升到全局作用域或函数作用域的头部
        同时，函数声明还会提升到所在的块级作用域的头部

        考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句
        ES6的块级作用域允许声明函数的规则，只有使用大括号的情况下成立，如果没有使用大括号，就会报错

3、const命令
    const声明一个只读的常量。一旦声明，常量的值就不能改变
    a、const一旦声明变量，就必须立即初始化，不能留到以后赋值
    b、const的作用域与let命令相同，只在声明所在的块级作用域内有效
    c、const命令声明的常量也是不提升，同样存在暂时性死区2，只能在声明的位置后面使用
    d、const声明的常量，也与let一样不可重复声明
    e、const命令指示保证变量名指向的地址不变，并不保证改地址的数据不变，所以将一个对象声明为常量必须非常小心
    const foo = Object.freeze({});  // 将对象冻结

    ES5只有两种声明变量的方法：var和function。ES6除了添加let和const命令还有另外两种声明变量的方法，import和class。所以ES6一共有6种声明变量的方法

4、顶层对象的属性
    顶层对象，在浏览器环境指的是window对象，在Node指的是global对象。ES5之中，顶层对象的属性与全局变量是等价的

    顶层对象的属性与全局变量挂钩，被认为是JavaScript语言最大的设计败笔之一，这样的设计带来了几个很大的问题
    a、没法再编译时就报错变量未声明的错误，只有运行时才能知道(因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的)
    b、很容易不知不觉地就创建了全局变量
    c、顶层对象的属性是到处可以读写的，这非常不利于模块化编程
    d、window对象有实体含义，指的是浏览器窗口对象，顶层对象是一个有实体含义的对象，也是不合适的

    ES6为了改变这一点，为了保持兼容性，var和function声明的全局变量依旧是顶层对象的属性，而let、const、class声明的全局变量不属于顶层对象的属性，从ES6开始，全局变量将逐步与顶层对象的属性脱钩

5、顶层对象
    ES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的
        a、浏览器里面，顶层对象是window，但Node和Web Worker没有window
        b、浏览器和Web Worker里面，self也指向顶层对象，但是Node没有self
        c、Node里面，顶层对象是global，但其他环境都不支持

    同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性
        a、全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块
        b、函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined
        c、不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。但是，如果浏览器用了CSP(Content Security Policy，内容安全政策)那么eval、new Function这些方法都可能无法使用


























