函数的扩展

1、函数参数的默认值
    ES6函数参数设定默认值好处：
        a、简洁
        b、阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档
        c、有利于将来的代码优化，及时未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行

    参数变量是默认声明的，所以不能用let或const再次声明

    如果非尾部的参数设置默认值，实际上这个参数是没法省略的(报错)

    作用域
        如果参数默认值是一个变量，则该变量所处的作用域，与其他变量的作用域规则是一样的，即先是当前函数的作用域，然后才是全局作用域

2、reset参数(类似arguments)
    ES6引入reset参数(形式为"...变量名")，用于获取函数的多余参数，这样就不需要使用arguments对象了。reset参数搭配的变量是一个数组，该变量将多余的参数放入数组中

    function fn (...numbers) {
        console.log(numbers);
    }   
    fn(1, 2, 3);

    reset参数中的变量代表一个数组，所以数组特有的方法都可以用于这个变量

3、扩展运算符
    扩展运算符是三个点(...)，它好比是reset参数的逆运算，将一个数组转为用逗号分隔的参数序列

    console.log(...[1, 2, 3]);  // 1 2 3
    console.log(1, ...[2, 3, 4], 5) // 1 2 3 4 5

    替代数组的apply方法
        // ES5方法
        function fn (x, y, z) {}
        var args = [0, 1, 2];
        fn.apply(null, args);
        // ES6方法
        function fn (x, y, z) {}
        var args = [0, 1, 2];
        fn(...args);

        // ES5方法
        Math.max.apply(null, [1, 2, 3, 4, 5]);
        Math.max(...[1, 2, 3]);

    扩展运算符的应用：
        a、合并数组
            [...arr1, ...arr2, ...arr3]
        b、与解构赋值结合
            let list = [1, 2, 3, 4];
            [a, ...rest] = list  => a = 1  rest = [2, 3, 4]
        c、函数的返回值
            JS的函数只能返回一个值，如果需要返回多个值，只能返回数组或对象
        d、字符串
            扩展运算符还可以将字符串转为真正的数组
            [...'hello'] => ['h', 'e', 'l', 'l', 'o'];
        e、实现了Iterator接口的对象
            任何Iterator接口的对象，都可以用扩展运算符转为真正的数组
        f、Map、Set、Generator函数

4、严格模式
    从ES5开始，函数内部可以设定为严格模式

    ES6规定，只要函数参数使用了默认值、解构赋值或扩展运算符，那么函数内部就不能显示设定为严格模式，否则会报错

5、name属性
    函数的name属性，返回该函数的函数名
    function fn () {}
    fn.name => fn

6、箭头函数
    ES6允许使用"箭头" ( =>) 定义函数

    var f = v => v;

    如果尖肉函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分
    var f = （） => 5;
    等同于 var f = function () {return 5};

    var sum = (num1, num2) => num1 + num2;
    等同于
    var sum = function (num1, num2){ return num1 + num2};

    如果箭头函数的代码块部分多余一条语句，就要使用大括号将它们括起来，并且使用return语句返回
    var sum = (num1, num2) => {return num1 + num2};

    由于大括号被解释被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号
    var get = id => ({id: id, name: 'i++'})


7、绑定this

8、尾调用优化

9、函数参数的尾逗号

























