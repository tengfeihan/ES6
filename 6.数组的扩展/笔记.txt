数组的扩展

1、Array.from()
    Array.from方法用于将两类对象转为真正的数组：类似数组的对象和可比案例的对象(包括ES6新增的数据结构Set和Map)

    简便写法[...arr] = Array.from(arr);

    Array.from还可以接受第二个参数
        Array.from([1, 2, 3], (x) => x * x);
        [1, 4, 9];

    Array.from还可以接受第三个参数，用来绑定this

2、Array.of()
    Array.of方法用于将一组值，转换为数组

    Array.of为了弥补数组构造函数Array的不足
    Array() => []
    Array(3) => [, , ,]
    Array(1,2,3) => [1,2,3]

    Array.of(3) => [3]  // 并不存在由于参数不同而导致重载

3、数组实例的copyWithin()
    将制定位置的成员复制到其他位置(会覆盖原有成员)，然后返回当前数组

    Array.prototype.copyWithin(target, start, end)
        target（必需）：从该位置开始替换数据。
        start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。
        end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。

4、数组实例的find()和findIndex()
    数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有成员依次执行回调函数，指导找出第一个返回值为true的成员，然后返回该成员。如果没有则返回undefined

    [1, 3, 5, -19, 22].find((n) => n < 0);  // -19

    [1, 22, 38, 55].find(function (value, index, arr) {
        // 
    });

    数组实例的findIndex方法和find非常类似，返回第一个符合条件的数组成员的位置，如果没有返回-1

5、数组实例的fill()
    fill方法使用给定值，填充一个数组
    ['a', 'b', 'c'].fill(7) => [7, 7, 7]

6、数组实例的entries()，keys()和values()
    ES6提供三个新的方法--entries()，keys()和values()用于遍历数组。

    可以用for...of循环进行遍历

    keys => 对键名的遍历(key)
    values => 对键值得遍历(values)
    entries => 对键值对的遍历

7、数组实例的includes()
    Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值

    [1, 2, 3].includes(2);     // true
    [1, 2, 3].includes(4);     // false
    [1, 2, NaN].includes(NaN); // true

8、数组的空位
    数组的空位指，数组的某一个位置没有任何值，比如[, , ,]
